@model WebApplication2.Models.KitchenViewModel

@{
    ViewData["Title"] = "Kitchen";
}
<h1>@ViewData["Title"]</h1>

<p>View room: Kitchen</p>
<head>
    <link rel="stylesheet" href="~/css/style.css" />
    <link rel="stylesheet" href="~/lib/font-awesome/css/all.min.css">
</head>

<div>
    <label>
        <input type="checkbox" id="toggle-plc-data" /> Pokaż/Ukryj Dane PLC
    </label>
</div>
<div id="plc-data-section">
    <h2>Wartości z PLC</h2>

    <p>lampSwitchHMI: <span id="lamp-switch-display">@Model.lampSwitchHMI</span></p>
    <p>wallSocket1HMI: <span id="wall-socket1-display">@Model.wallSocket1HMI</span></p>
    <p>wallSocket2HMI: <span id="wall-socket2-display">@Model.wallSocket2HMI</span></p>
    <p>facadeBlindsUpLeftHMI: <span id="facade-blinds-up-left-display">@Model.facadeBlindsUpLeftHMI</span></p>
    <p>facadeBlindsDownLeftHMI: <span id="facade-blinds-down-left-display">@Model.facadeBlindsDownLeftHMI</span></p>
    <p>facadeBlindsStopLeftHMI: <span id="facade-blinds-stop-left-display">@Model.facadeBlindsStopLeftHMI</span></p>
    <p>facadeBlindsUpRightHMI: <span id="facade-blinds-up-right-display">@Model.facadeBlindsUpRightHMI</span></p>
    <p>facadeBlindsDownRightHMI: <span id="facade-blinds-down-right-display">@Model.facadeBlindsDownRightHMI</span></p>
    <p>facadeBlindsStopRightHMI: <span id="facade-blinds-stop-right-display">@Model.facadeBlindsStopRightHMI</span></p>
    <p>lampRelayCeiling: <span id="lamp-relay-ceiling-display">@Model.lampRelayCeiling</span></p>
    <p>windowOpenSensor: <span id="window-open-sensor-display">@Model.windowOpenSensor</span></p>
</div>

<h2>Zapis danych do PLC</h2>

<button id="toggle-wall-socket1-button" class="toggle-button-wall-socket-@Model.wallSocket1HMI">
    <i class="fas fa-plug"></i>Wall Socket 1
</button>
<button id="toggle-wall-socket2-button" class="toggle-button-wall-socket-@Model.wallSocket2HMI">
    <i class="fas fa-plug"></i>Wall Socket 2
</button>
<button id="toggle-blinds-up-left-button">
    <i id="blinds-up-icon" class="fas fa-angle-double-up"></i>Blinds Up Left
</button>
<button id="toggle-blinds-down-left-button">
    <i id="blinds-down-icon" class="fas fa-angle-double-down"></i>Blinds Down Left
</button>
<button id="toggle-blinds-stop-left-button">
    <i id="blinds-stop-icon" class="fas fa-stop-circle"></i>Blinds Stop Left
</button>
<button id="toggle-blinds-up-right-button">
    <i id="blinds-up-icon" class="fas fa-angle-double-up"></i>Blinds Up Right
</button>
<button id="toggle-blinds-down-right-button">
    <i id="blinds-down-icon" class="fas fa-angle-double-down"></i>Blinds Down Right
</button>
<button id="toggle-blinds-stop-right-button">
    <i id="blinds-stop-icon" class="fas fa-stop-circle"></i>Blinds Stop Right
</button>
<button id="momentary-lamp-button">
    <i id="lamp-icon" class="fas fa-lightbulb"></i> Lamp Button
</button>

@section Scripts {
    <script>
        async function refresh() {
            const request = await fetch('/kitchen/json');
            const data = await request.json();

            console.log('Nasze dane', data);
            document.getElementById('lamp-switch-display').textContent = data.lampSwitchHMI;
            document.getElementById('wall-socket1-display').textContent = data.wallSocket1HMI;
            document.getElementById('wall-socket2-display').textContent = data.wallSocket2HMI;
            document.getElementById('facade-blinds-up-left-display').textContent = data.facadeBlindsUpLeftHMI;
            document.getElementById('facade-blinds-down-left-display').textContent = data.facadeBlindsDownLeftHMI;
            document.getElementById('facade-blinds-stop-left-display').textContent = data.facadeBlindsStopLeftHMI;
            document.getElementById('facade-blinds-up-right-display').textContent = data.facadeBlindsUpRightHMI;
            document.getElementById('facade-blinds-down-right-display').textContent = data.facadeBlindsDownRightHMI;
            document.getElementById('facade-blinds-stop-right-display').textContent = data.facadeBlindsStopRightHMI;
            document.getElementById('lamp-relay-ceiling-display').textContent = data.lampRelayCeiling;
            document.getElementById('window-open-sensor-display').textContent = data.windowOpenSensor;

            // Aktualizacja koloru ikonki lampy
            updateLampIconColor(data.lampRelayCeiling);

            updateButtonColor(data.wallSocket1HMI, 'toggle-wall-socket1-button');
            updateButtonColor(data.wallSocket2HMI, 'toggle-wall-socket2-button');
            updateButtonColor(data.facadeBlindsUpLeftHMI, 'toggle-blinds-up-left-button');
            updateButtonColor(data.facadeBlindsDownLeftHMI, 'toggle-blinds-down-left-button');
            updateButtonColor(data.facadeBlindsStopLeftHMI, 'toggle-blinds-stop-left-button');
            updateButtonColor(data.facadeBlindsUpRightHMI, 'toggle-blinds-up-right-button');
            updateButtonColor(data.facadeBlindsDownRightHMI, 'toggle-blinds-down-right-button');
            updateButtonColor(data.facadeBlindsStopRightHMI, 'toggle-blinds-stop-right-button');
        }

        function updateLampIconColor(lampState) {
            const lampIcon = document.getElementById('lamp-icon');

            if (lampState) {
                lampIcon.style.color = 'yellow'; // Lampa włączona - żółty kolor
            } else {
                lampIcon.style.color = 'gray'; // Lampa wyłączona - szary kolor
            }
        }

        setInterval(refresh, 2000);

        document.getElementById('toggle-wall-socket1-button').addEventListener('click', async () => {
            await toggleState('/kitchen/toggleWallSocket1', 'wallSocket1HMI', 'toggle-wall-socket1-button');
        });

        document.getElementById('toggle-wall-socket2-button').addEventListener('click', async () => {
            await toggleState('/kitchen/toggleWallSocket2', 'wallSocket2HMI', 'toggle-wall-socket2-button');
        });

        document.getElementById('toggle-blinds-up-left-button').addEventListener('click', async () => {
            await toggleState('/kitchen/toggleBlindsUpLeft', 'facadeBlindsUpLeftHMI', 'toggle-blinds-up-left-button');
        });

        document.getElementById('toggle-blinds-down-left-button').addEventListener('click', async () => {
            await toggleState('/kitchen/toggleBlindsDownLeft', 'facadeBlindsDownLeftHMI', 'toggle-blinds-down-left-button');
        });

        document.getElementById('toggle-blinds-stop-left-button').addEventListener('click', async () => {
            await toggleState('/kitchen/toggleBlindsStopLeft', 'facadeBlindsStopLeftHMI', 'toggle-blinds-stop-left-button');
        });

        document.getElementById('toggle-blinds-up-right-button').addEventListener('click', async () => {
            await toggleState('/kitchen/toggleBlindsUpRight', 'facadeBlindsUpRightHMI', 'toggle-blinds-up-right-button');
        });

        document.getElementById('toggle-blinds-down-right-button').addEventListener('click', async () => {
            await toggleState('/kitchen/toggleBlindsDownRight', 'facadeBlindsDownRightHMI', 'toggle-blinds-down-right-button');
        });

        document.getElementById('toggle-blinds-stop-right-button').addEventListener('click', async () => {
            await toggleState('/kitchen/toggleBlindsStopRight', 'facadeBlindsStopRightHMI', 'toggle-blinds-stop-right-button');
        });

        async function toggleState(url, modelPropertyName, buttonId) {
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({})
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                let displayId = modelPropertyName.replace('HMI', '');
                displayId = displayId.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
                displayId = displayId + '-display';

                console.log('Generowany identyfikator:', displayId);
                document.getElementById(displayId).textContent = data[modelPropertyName];

                updateButtonColor(data[modelPropertyName], buttonId);

            } catch (error) {
                console.error(`Błąd podczas zmiany ${modelPropertyName}:`, error);
            }
        }

        function updateButtonColor(toggleButtonState, buttonId) {
            const button = document.getElementById(buttonId);
            button.className = toggleButtonState ? 'toggle-button-true' : 'toggle-button-false';
        }

        let momentaryButton = document.getElementById('momentary-lamp-button');
        let isMomentaryButtonPressed = false;
        let momentaryButtonInterval;

        momentaryButton.addEventListener('mousedown', () => {
            isMomentaryButtonPressed = true;
            setVariableTo1();

            momentaryButtonInterval = setInterval(() => {
                if (isMomentaryButtonPressed) {
                    setVariableTo1();
                }
            }, 100);
        });

        momentaryButton.addEventListener('mouseup', () => {
            isMomentaryButtonPressed = false;
            setVariableTo0();
            clearInterval(momentaryButtonInterval);
        });

        momentaryButton.addEventListener('touchstart', () => {
            isMomentaryButtonPressed = true;
            setVariableTo1();

            momentaryButtonInterval = setInterval(() => {
                if (isMomentaryButtonPressed) {
                    setVariableTo1();
                }
            }, 100);
        });

        momentaryButton.addEventListener('touchend', () => {
            isMomentaryButtonPressed = false;
            setVariableTo0();
            clearInterval(momentaryButtonInterval);
        });

        async function setVariableTo1() {
            try {
                await fetch('/kitchen/SetMomentarySwitchToTrue', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({})
                });
            } catch (error) {
                console.error('Błąd podczas ustawiania zmiennej na 1:', error);
            }
        }

        async function setVariableTo0() {
            try {
                await fetch('/kitchen/SetMomentarySwitchToFalse', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({})
                });
            } catch (error) {
                console.error('Błąd podczas ustawiania zmiennej na 0:', error);
            }
        }

        momentaryButton.addEventListener('mousedown', () => {
            momentaryButton.classList.add('pressed');
        });

        momentaryButton.addEventListener('mouseup', () => {
            momentaryButton.classList.remove('pressed');
        });

        momentaryButton.addEventListener('touchstart', () => {
            momentaryButton.classList.add('pressed');
        });

        momentaryButton.addEventListener('touchend', () => {
            momentaryButton.classList.remove('pressed');
        });
        // Zapamiętać ostatni stan checkboxa i przywrócić go po odświeżeniu strony,
        const toggleCheckbox = document.getElementById('toggle-plc-data');
        const plcDataSection = document.getElementById('plc-data-section');

        // Funkcja do zapisywania stanu checkboxa w localStorage
        function saveCheckboxState() {
            localStorage.setItem('plcDataVisible', toggleCheckbox.checked);
        }

        // Funkcja do odczytywania stanu checkboxa z localStorage
        function loadCheckboxState() {
            const isVisible = localStorage.getItem('plcDataVisible');
            if (isVisible !== null) {
                toggleCheckbox.checked = isVisible === 'true';
                plcDataSection.style.display = toggleCheckbox.checked ? 'block' : 'none';
            }
        }

        // Nasłuchiwanie zmiany stanu checkboxa i zapisywanie go
        toggleCheckbox.addEventListener('change', function () {
            plcDataSection.style.display = this.checked ? 'block' : 'none';
            saveCheckboxState();
        });

        // Ładowanie stanu checkboxa po załadowaniu strony
        document.addEventListener('DOMContentLoaded', loadCheckboxState)

    </script>
}