@model List<WebApplication2.Models.IrrigationViewModel>

<h2>Dane z stTestArray</h2>

<table>
    <thead>
        <tr>
            <th>Index</th>
            <th>bBoolTest1</th>
            <th>bBoolTest2</th>
            <th>Czas</th>
        </tr>
    </thead>
    <tbody id="checkboxTableBody">
        @for (int i = 0; i < Model.Count; i++)
        {
            <tr>
                <td>@i</td>
                <td>
                    <input type="checkbox" class="update-checkbox" data-index="@i" data-field="bBoolTest1" @(Model[i].bBoolTest1 ? "checked" : "") />
                </td>
                <td>
                    <input type="checkbox" class="update-checkbox" data-index="@i" data-field="bBoolTest2" @(Model[i].bBoolTest2 ? "checked" : "") />
                </td>
                <td>
                    @Model[i].Czas
                </td>
            </tr>
        }
    </tbody>
</table>



<script>
    document.addEventListener("DOMContentLoaded", function () {
        // 1️⃣ Obsługa zmiany checkboxów (zapis do PLC)
        document.querySelectorAll(".update-checkbox").forEach(function (checkbox) {
            checkbox.addEventListener("change", function () {
                let index = this.getAttribute("data-index");
                let field = this.getAttribute("data-field");
                let value = this.checked;

                fetch("/Irrigation/UpdateTestArray", { // Zmienione
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ index: index, field: field, value: value })
                }).then(response => {
                    if (!response.ok) {
                        alert("Błąd zapisu do PLC!");
                    }
                });
            });
        });

        // 2️⃣ Automatyczna aktualizacja co 2 sekundy
        setInterval(() => {
            console.log("Rozpoczęto pobieranie danych z PLC...");

            fetch("/Irrigation/GetTestArray")
                .then(response => {
                    console.log("Otrzymano odpowiedź z serwera:", response);
                    if (!response.ok) {
                        throw new Error(`Błąd HTTP! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Otrzymano dane z PLC:", data);

                    if (!Array.isArray(data)) {
                        console.error("Otrzymane dane nie są tablicą:", data);
                        return; // Przerwij dalsze przetwarzanie
                    }

                    data.forEach((item, index) => {
                        console.log(`Przetwarzanie elementu o indeksie ${index}:`, item);

                        const bBoolTest1Input = document.querySelector(`input[data-index="${index}"][data-field="bBoolTest1"]`);
                        const bBoolTest2Input = document.querySelector(`input[data-index="${index}"][data-field="bBoolTest2"]`);

                        if (bBoolTest1Input) {
                            console.log(`Ustawianie bBoolTest1 dla indeksu ${index} na:`, item.bBoolTest1);
                            bBoolTest1Input.checked = item.bBoolTest1;
                        } else {
                            console.warn(`Nie znaleziono elementu bBoolTest1 dla indeksu ${index}`);
                        }

                        if (bBoolTest2Input) {
                            console.log(`Ustawianie bBoolTest2 dla indeksu ${index} na:`, item.bBoolTest2);
                            bBoolTest2Input.checked = item.bBoolTest2;
                        } else {
                            console.warn(`Nie znaleziono elementu bBoolTest2 dla indeksu ${index}`);
                        }
                    });
                    console.log("Aktualizacja checkboxów zakończona.");
                })
                .catch(error => {
                    console.error("Błąd pobierania danych z PLC:", error);
                });

        }, 1000);
    });

    // Serializacja modelu do JSON
    var modelJson = @Html.Raw(Json.Serialize(Model));

    // Logowanie JSON w konsoli przeglądarki
    console.log("Model z kontrolera:", modelJson);
</script>
