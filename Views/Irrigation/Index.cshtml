@model WebApplication2.Models.IrrigationSystemSettings

@{
    ViewData["Title"] = "Irrigation";
}

<h1>@ViewData["Title"]</h1>

<h2>Ustawienia systemu nawadniania</h2>

@for (int sectionIndex = 1; sectionIndex <= 6; sectionIndex++)
{
    <h3>Sekcja @sectionIndex</h3>
    <form id="section-form-@sectionIndex">
        @{
            var section = Model.GetType().GetProperty($"Section{sectionIndex}").GetValue(Model) as WebApplication2.Models.ST_WeeklyTimeSwitchInput[];
        }
        @if (section != null)
        {
            @for (int i = 0; i < section.Length; i++)
            {
                <h4>Ustawienie @(i + 1)</h4>
                <label>Włącz:</label>
                <input type="checkbox" name="Section@(sectionIndex)[@(i)].bEnable" @(section[i].bEnable ? "checked" : "")>

                <br>

                <label>Niedziela:</label>
                <input type="checkbox" name="Section@(sectionIndex)[@(i)].bSunday" @(section[i].bSunday ? "checked" : "")>

                <br>

                <label>Poniedziałek:</label>
                <input type="checkbox" name="Section@(sectionIndex)[@(i)].bMonday" @(section[i].bMonday ? "checked" : "")>

                <br>

                <label>Wtorek:</label>
                <input type="checkbox" name="Section@(sectionIndex)[@(i)].bTuesday" @(section[i].bTuesday ? "checked" : "")>

                <br>

                <label>Środa:</label>
                <input type="checkbox" name="Section@(sectionIndex)[@(i)].bWednesday" @(section[i].bWednesday ? "checked" : "")>

                <br>

                <label>Czwartek:</label>
                <input type="checkbox" name="Section@(sectionIndex)[@(i)].bThursday" @(section[i].bThursday ? "checked" : "")>

                <br>

                <label>Piątek:</label>
                <input type="checkbox" name="Section@(sectionIndex)[@(i)].bFriday" @(section[i].bFriday ? "checked" : "")>

                <br>

                <label>Sobota:</label>
                <input type="checkbox" name="Section@(sectionIndex)[@(i)].bSaturday" @(section[i].bSaturday ? "checked" : "")>

                <br>
@*
                <label>Czas włączenia:</label>
                <input type="time" name="Section@(sectionIndex)[@(i)].iTimeOnHh" value=" @(section[i].iTimeOnHh.ToInt("hh\\:mm"))">

                <br>

                <label>Czas wyłączenia:</label>
                <input type="time" name="Section@(sectionIndex)[@(i)].tTimeOff" value=" @(section[i].tTimeOff.ToInt32("hh\\:mm"))">

                <br> *@
            }
        }
        <button type="button" onclick="saveSection(@sectionIndex)">Zapisz sekcję @sectionIndex</button>
    </form>
}

<h3>Przełączniki zaworów</h3>
<form id="valve-switches-form">
    @if (Model.ValveSwitches != null)
    {
        @for (int i = 0; i < Model.ValveSwitches.Length; i++)
        {
            <label>Zawór @(i + 1):</label>
            <input type="checkbox" name="ValveSwitches[@i]" checked="@Model.ValveSwitches[i]">

            <br>
        }
    }
    <button type="button" onclick="saveValveSwitches()">Zapisz zawory</button>
</form>

<script>
    // Funkcja zapisująca dane dla sekcji
    function saveSection(sectionIndex) {
        const form = document.getElementById(`section-form-${sectionIndex}`);
        const formData = new FormData(form);
        const data = {};
        formData.forEach((value, key) => {
            if (key.startsWith(`Section${sectionIndex}`)) {
                const parts = key.match(/\[(\d+)\]\.(\w+)/);
                if (parts) {
                    const index = parts[1];
                    const prop = parts[2];
                    if (!data[`Section${sectionIndex}`]) {
                        data[`Section${sectionIndex}`] = [];
                    }
                    if (!data[`Section${sectionIndex}`][index]) {
                        data[`Section${sectionIndex}`][index] = {};
                    }
                    data[`Section${sectionIndex}`][index][prop] = value === 'on' ? true : value;
                }
            }
        });
        sendData(data);
    }

    // Funkcja zapisująca dane dla przełączników zaworów
    function saveValveSwitches() {
        const form = document.getElementById('valve-switches-form');
        const formData = new FormData(form);
        const data = {};
        formData.forEach((value, key) => {
            if (key.startsWith('ValveSwitches')) {
                if (!data.ValveSwitches) {
                    data.ValveSwitches = [];
                }
                data.ValveSwitches.push(value === 'on');
            }
        });
        sendData(data);
    }

    // Funkcja wysyłająca dane na serwer
    async function sendData(data) {
        try {
            const response = await fetch('/irrigation/saveSettings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                console.log('Ustawienia zapisane');
                location.reload(); // Odśwież stronę po zapisaniu
            } else {
                console.error('Błąd zapisu');
            }
        } catch (error) {
            console.error('Błąd:', error);
        }
    }

</script>
