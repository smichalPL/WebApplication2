@model WebApplication2.Models.SalonViewModel

@{
    ViewData["Title"] = "Salon";
}
<h1>@ViewData["Title"]</h1>

<p>View room: Salon</p>
<head>
    <link rel="stylesheet" href="~/css/style.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<h2>Wartości z PLC</h2>

<p>lampSwitch1HMI: <span id="lamp-switch1-display">@Model.lampSwitch1HMI</span></p>
<p>lampSwitch2HMI: <span id="lamp-switch2-display">@Model.lampSwitch2HMI</span></p>
<p>lampSwitch3HMI: <span id="lamp-switch3-display">@Model.lampSwitch3HMI</span></p>
<p>wallSocket1HMI: <span id="wall-socket1-display">@Model.wallSocket1HMI</span></p>
<p>wallSocket2HMI: <span id="wall-socket2-display">@Model.wallSocket2HMI</span></p>
<p>wallSocket3HMI: <span id="wall-socket3-display">@Model.wallSocket3HMI</span></p>
<p>wallSocket4HMI: <span id="wall-socket4-display">@Model.wallSocket4HMI</span></p>
<p>facadeBlindsUpHMI: <span id="facade-blinds-up-display">@Model.facadeBlindsUpHMI</span></p>
<p>facadeBlindsDownHMI: <span id="facade-blinds-down-display">@Model.facadeBlindsDownHMI</span></p>
<p>facadeBlindsStopHMI: <span id="facade-blinds-stop-display">@Model.facadeBlindsStopHMI</span></p>
<p>facadeBlindsUpHsLeftHMI: <span id="facade-blinds-up-hs-left-display">@Model.facadeBlindsUpHsLeftHMI</span></p>
<p>facadeBlindsDownHsLeftHMI: <span id="facade-blinds-down-hs-left-display">@Model.facadeBlindsDownHsLeftHMI</span></p>
<p>facadeBlindsStopHsLeftHMI: <span id="facade-blinds-stop-hs-left-display">@Model.facadeBlindsStopHsLeftHMI</span></p>
<p>facadeBlindsUpHsRightHMI: <span id="facade-blinds-up-hs-right-display">@Model.facadeBlindsUpHsRightHMI</span></p>
<p>facadeBlindsDownHsRightHMI: <span id="facade-blinds-down-hs-right-display">@Model.facadeBlindsDownHsRightHMI</span></p>
<p>facadeBlindsStopHsRightHMI: <span id="facade-blinds-stop-hs-right-display">@Model.facadeBlindsStopHsRightHMI</span></p>
<p>lampRelayCeiling1: <span id="lamp-relay-ceiling1-display">@Model.lampRelayCeiling1</span></p>
<p>lampRelayCeiling2: <span id="lamp-relay-ceiling2-display">@Model.lampRelayCeiling2</span></p>
<p>lampRelayCeiling3: <span id="lamp-relay-ceiling3-display">@Model.lampRelayCeiling3</span></p>
<p>windowOpenSensor: <span id="window-open-sensor-display">@Model.windowOpenSensor</span></p>

<h2>Zapis danych do PLC</h2>

<button id="toggle-wall-socket1-button" class="toggle-button-wall-socket-@Model.wallSocket1HMI">
    <i class="fas fa-plug"></i>Wall Socket 1
</button>
<button id="toggle-wall-socket2-button" class="toggle-button-wall-socket-@Model.wallSocket2HMI">
    <i class="fas fa-plug"></i>Wall Socket 2
</button>
<button id="toggle-wall-socket3-button" class="toggle-button-wall-socket-@Model.wallSocket3HMI">
    <i class="fas fa-plug"></i>Wall Socket 3
</button>
<button id="toggle-wall-socket4-button" class="toggle-button-wall-socket-@Model.wallSocket4HMI">
    <i class="fas fa-plug"></i>Wall Socket 4
</button>
<button id="toggle-blinds-up-button">
    <i id="blinds-up-icon" class="fas fa-angle-double-up"></i> Blinds Up
</button>
<button id="toggle-blinds-down-button">
    <i id="blinds-down-icon" class="fas fa-angle-double-down"></i> Blinds Down
</button>
<button id="toggle-blinds-stop-button">
    <i id="blinds-stop-icon" class="fas fa-stop-circle"></i> Blinds Stop
</button>
<button id="toggle-blinds-up-hs-left-button">
    <i id="blinds-up-hs-left-icon" class="fas fa-angle-double-up"></i>Blinds HS Left
</button>
<button id="toggle-blinds-down-hs-left-button">
    <i id="blinds-down-hs-left-icon" class="fas fa-angle-double-down"></i>Blinds HS Left
</button>
<button id="toggle-blinds-stop-hs-left-button">
    <i id="blinds-stop-hs-left-icon" class="fas fa-stop-circle"></i>Blinds HS Left
</button>
<button id="toggle-blinds-up-hs-right-button">
    <i id="blinds-up-hs-right-icon" class="fas fa-angle-double-up"></i>Blinds HS Right
</button>
<button id="toggle-blinds-down-hs-right-button">
    <i id="blinds-down-hs-right-icon" class="fas fa-angle-double-down"></i>Blinds HS Right
</button>
<button id="toggle-blinds-stop-hs-right-button">
    <i id="blinds-stop-hs-right-icon" class="fas fa-stop-circle"></i>Blinds HS Right
</button>
<button id="momentary-lamp1-button">
    <i id="lamp1-icon" class="fas fa-lightbulb"></i> Lamp 1 Button
</button>
<button id="momentary-lamp2-button">
    <i id="lamp2-icon" class="fas fa-lightbulb"></i> Lamp 2 Button
</button>
<button id="momentary-lamp3-button">
    <i id="lamp3-icon" class="fas fa-lightbulb"></i> Lamp 3 Button
</button>


@section Scripts {
    <script>
        async function refresh() {
            const request = await fetch('/salon/json');
            const data = await request.json();


            console.log('Nasze dane', data);
            document.getElementById('lamp-switch1-display').textContent = data.lampSwitch1HMI;
            document.getElementById('lamp-switch2-display').textContent = data.lampSwitch2HMI;
            document.getElementById('lamp-switch3-display').textContent = data.lampSwitch3HMI;
            document.getElementById('wall-socket1-display').textContent = data.wallSocket1HMI;
            document.getElementById('wall-socket2-display').textContent = data.wallSocket2HMI;
            document.getElementById('wall-socket3-display').textContent = data.wallSocket3HMI;
            document.getElementById('wall-socket4-display').textContent = data.wallSocket4HMI;
            document.getElementById('facade-blinds-up-display').textContent = data.facadeBlindsUpHMI;
            document.getElementById('facade-blinds-down-display').textContent = data.facadeBlindsDownHMI;
            document.getElementById('facade-blinds-stop-display').textContent = data.facadeBlindsStopHMI;
            document.getElementById('facade-blinds-up-hs-left-display').textContent = data.facadeBlindsUpHsLeftHMI;
            document.getElementById('facade-blinds-down-hs-left-display').textContent = data.facadeBlindsDownHsLeftHMI;
            document.getElementById('facade-blinds-stop-hs-left-display').textContent = data.facadeBlindsStopHsLeftHMI;
            document.getElementById('facade-blinds-up-hs-right-display').textContent = data.facadeBlindsUpHsRightHMI;
            document.getElementById('facade-blinds-down-hs-right-display').textContent = data.facadeBlindsDownHsRightHMI;
            document.getElementById('facade-blinds-stop-hs-right-display').textContent = data.facadeBlindsStopHsRightHMI;
            document.getElementById('lamp-relay-ceiling1-display').textContent = data.lampRelayCeiling1;
            document.getElementById('lamp-relay-ceiling2-display').textContent = data.lampRelayCeiling2;
            document.getElementById('lamp-relay-ceiling3-display').textContent = data.lampRelayCeiling3;
            document.getElementById('window-open-sensor-display').textContent = data.windowOpenSensor;

            // Aktualizacja koloru ikonki lampy
            updateLampIconColor(data.lampRelayCeiling1, 'lamp1-icon');
            updateLampIconColor(data.lampRelayCeiling2, 'lamp2-icon');
            updateLampIconColor(data.lampRelayCeiling3, 'lamp3-icon');

            updateButtonColor(data.wallSocket1HMI, 'toggle-wall-socket1-button');
            updateButtonColor(data.wallSocket2HMI, 'toggle-wall-socket2-button');
            updateButtonColor(data.wallSocket3HMI, 'toggle-wall-socket3-button');
            updateButtonColor(data.wallSocket4HMI, 'toggle-wall-socket4-button');
            updateButtonColor(data.facadeBlindsUpHMI, 'toggle-blinds-up-button');
            updateButtonColor(data.facadeBlindsDownHMI, 'toggle-blinds-down-button');
            updateButtonColor(data.facadeBlindsStopHMI, 'toggle-blinds-stop-button');
            updateButtonColor(data.facadeBlindsUpHsLeftHMI, 'toggle-blinds-up-hs-left-button');
            updateButtonColor(data.facadeBlindsDownHsLeftHMI, 'toggle-blinds-down-hs-left-button');
            updateButtonColor(data.facadeBlindsStopHsLeftHMI, 'toggle-blinds-stop-hs-left-button');
            updateButtonColor(data.facadeBlindsUpHsRightHMI, 'toggle-blinds-up-hs-right-button');
            updateButtonColor(data.facadeBlindsDownHsRightHMI, 'toggle-blinds-down-hs-right-button');
            updateButtonColor(data.facadeBlindsStopHsRightHMI, 'toggle-blinds-stop-hs-right-button');
        }

        function updateLampIconColor(lampState, lampIconId) {
            const lampIcon = document.getElementById(lampIconId);

            if (lampState) {
                lampIcon.style.color = 'yellow'; // Lampa włączona - żółty kolor
            } else {
                lampIcon.style.color = 'gray'; // Lampa wyłączona - szary kolor
            }
        }
        setInterval(refresh, 2000);

        document.getElementById('toggle-wall-socket1-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleWallSocket1', 'wallSocket1HMI', 'toggle-wall-socket1-button');
        });

        document.getElementById('toggle-wall-socket2-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleWallSocket2', 'wallSocket2HMI', 'toggle-wall-socket2-button');
        });

        document.getElementById('toggle-wall-socket3-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleWallSocket3', 'wallSocket3HMI', 'toggle-wall-socket3-button');
        });

        document.getElementById('toggle-wall-socket4-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleWallSocket4', 'wallSocket4HMI', 'toggle-wall-socket4-button');
        });

        document.getElementById('toggle-blinds-up-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleBlindsUp', 'facadeBlindsUpHMI', 'toggle-blinds-up-button');
        });

        document.getElementById('toggle-blinds-down-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleBlindsDown', 'facadeBlindsDownHMI', 'toggle-blinds-down-button');
        });

        document.getElementById('toggle-blinds-stop-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleBlindsStop', 'facadeBlindsStopHMI', 'toggle-blinds-stop-button');
        });

        document.getElementById('toggle-blinds-up-hs-left-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleBlindsUpHsLeft', 'facadeBlindsUpHsLeftHMI', 'toggle-blinds-up-hs-left-button');
        });

        document.getElementById('toggle-blinds-down-hs-left-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleBlindsDownHsLeft', 'facadeBlindsDownHsLeftHMI', 'toggle-blinds-down-hs-left-button');
        });

        document.getElementById('toggle-blinds-stop-hs-left-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleBlindsStopHsLeft', 'facadeBlindsStopHsLeftHMI', 'toggle-blinds-stop-hs-left-button');
        });

        document.getElementById('toggle-blinds-up-hs-right-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleBlindsUpHsRight', 'facadeBlindsUpHsRightHMI', 'toggle-blinds-up-hs-right-button');
        });

        document.getElementById('toggle-blinds-down-hs-right-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleBlindsDownHsRight', 'facadeBlindsDownHsRightHMI', 'toggle-blinds-down-hs-right-button');
        });

        document.getElementById('toggle-blinds-stop-hs-right-button').addEventListener('click', async () => {
            await toggleState('/salon/toggleBlindsStopHsRight', 'facadeBlindsStopHsRightHMI', 'toggle-blinds-stop-hs-right-button');
        });

        async function toggleState(url, modelPropertyName, buttonId) {
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({})
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                let displayId = modelPropertyName.replace('HMI', '');
                displayId = displayId.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
                displayId = displayId + '-display';

                console.log('Generowany identyfikator:', displayId);
                document.getElementById(displayId).textContent = data[modelPropertyName];

                updateButtonColor(data[modelPropertyName], buttonId);

            } catch (error) {
                console.error(`Błąd podczas zmiany ${modelPropertyName}:`, error);
            }
        }


            function updateButtonColor(toggleButtonState, buttonId) {
                const button = document.getElementById(buttonId);
                button.className = toggleButtonState ? 'toggle-button-true' : 'toggle-button-false';
            }

            let momentaryButton1 = document.getElementById('momentary-lamp1-button');
            let isMomentaryButton1Pressed = false;
            let momentaryButton1Interval;

            momentaryButton1.addEventListener('mousedown', () => {
                isMomentaryButton1Pressed = true;
                setVariable1To1();

                momentaryButton1Interval = setInterval(() => {
                    if (isMomentaryButton1Pressed) {
                        setVariable1To1();
                    }
                }, 100);
            });

            momentaryButton1.addEventListener('mouseup', () => {
                isMomentaryButton1Pressed = false;
                setVariable1To0();
                clearInterval(momentaryButton1Interval);
            });

            momentaryButton1.addEventListener('touchstart', () => {
                isMomentaryButton1Pressed = true;
                setVariable1To1();

                momentaryButton1Interval = setInterval(() => {
                    if (isMomentaryButton1Pressed) {
                        setVariable1To1();
                    }
                }, 100);
            });

            momentaryButton1.addEventListener('touchend', () => {
                isMomentaryButton1Pressed = false;
                setVariable1To0();
                clearInterval(momentaryButton1Interval);
            });

            async function setVariable1To1() {
                try {
                    await fetch('/salon/SetMomentarySwitch1ToTrue', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({})
                    });
                } catch (error) {
                    console.error('Błąd podczas ustawiania zmiennej 1 na 1:', error);
                }
            }

            async function setVariable1To0() {
                try {
                    await fetch('/salon/SetMomentarySwitch1ToFalse', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({})
                    });
                } catch (error) {
                    console.error('Błąd podczas ustawiania zmiennej 1 na 0:', error);
                }
            }

            momentaryButton1.addEventListener('mousedown', () => {
                momentaryButton1.classList.add('pressed');
            });

            momentaryButton1.addEventListener('mouseup', () => {
                momentaryButton1.classList.remove('pressed');
            });

            momentaryButton1.addEventListener('touchstart', () => {
                momentaryButton1.classList.add('pressed');
            });

            momentaryButton1.addEventListener('touchend', () => {
                momentaryButton1.classList.remove('pressed');
            });

            // Momentary Button 2

            let momentaryButton2 = document.getElementById('momentary-lamp2-button');
            let isMomentaryButton2Pressed = false;
            let momentaryButton2Interval;

            momentaryButton2.addEventListener('mousedown', () => {
                isMomentaryButton2Pressed = true;
                setVariable2To1();

                momentaryButton2Interval = setInterval(() => {
                    if (isMomentaryButton2Pressed) {
                        setVariable2To1();
                    }
                }, 100);
            });

            momentaryButton2.addEventListener('mouseup', () => {
                isMomentaryButton2Pressed = false;
                setVariable2To0();
                clearInterval(momentaryButton2Interval);
            });

            momentaryButton2.addEventListener('touchstart', () => {
                isMomentaryButton2Pressed = true;
                setVariable2To1();

                momentaryButton2Interval = setInterval(() => {
                    if (isMomentaryButton2Pressed) {
                        setVariable2To1();
                    }
                }, 100);
            });

            momentaryButton2.addEventListener('touchend', () => {
                isMomentaryButton2Pressed = false;
                setVariable2To0();
                clearInterval(momentaryButton2Interval);
            });

            async function setVariable2To1() {
                try {
                    await fetch('/salon/SetMomentarySwitch2ToTrue', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({})
                    });
                } catch (error) {
                    console.error('Błąd podczas ustawiania zmiennej 2 na 1:', error);
                }
            }

            async function setVariable2To0() {
                try {
                    await fetch('/salon/SetMomentarySwitch2ToFalse', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({})
                    });
                } catch (error) {
                    console.error('Błąd podczas ustawiania zmiennej 2 na 0:', error);
                }
            }

            momentaryButton2.addEventListener('mousedown', () => {
                momentaryButton2.classList.add('pressed');
            });

            momentaryButton2.addEventListener('mouseup', () => {
                momentaryButton2.classList.remove('pressed');
            });

            momentaryButton2.addEventListener('touchstart', () => {
                momentaryButton2.classList.add('pressed');
            });

            momentaryButton2.addEventListener('touchend', () => {
                momentaryButton2.classList.remove('pressed');
            });

            // Momentary Button 3

            let momentaryButton3 = document.getElementById('momentary-lamp3-button');
            let isMomentaryButton3Pressed = false;
            let momentaryButton3Interval;

            momentaryButton3.addEventListener('mousedown', () => {
                isMomentaryButton3Pressed = true;
                setVariable3To1();

                momentaryButton3Interval = setInterval(() => {
                    if (isMomentaryButton3Pressed) {
                        setVariable3To1();
                    }
                }, 100);
            });

            momentaryButton3.addEventListener('mouseup', () => {
                isMomentaryButton3Pressed = false;
                setVariable3To0();
                clearInterval(momentaryButton3Interval);
            });

            momentaryButton3.addEventListener('touchstart', () => {
                isMomentaryButton3Pressed = true;
                setVariable3To1();

                momentaryButton3Interval = setInterval(() => {
                    if (isMomentaryButton3Pressed) {
                        setVariable3To1();
                    }
                }, 100);
            });

            momentaryButton3.addEventListener('touchend', () => {
                isMomentaryButton3Pressed = false;
                setVariable3To0();
                clearInterval(momentaryButton3Interval);
            });

            async function setVariable3To1() {
                try {
                    await fetch('/salon/SetMomentarySwitch3ToTrue', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({})
                    });
                } catch (error) {
                    console.error('Błąd podczas ustawiania zmiennej 3 na 1:', error);
                }
            }

            async function setVariable3To0() {
                try {
                    await fetch('/salon/SetMomentarySwitch3ToFalse', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({})
                    });
                } catch (error) {
                    console.error('Błąd podczas ustawiania zmiennej 3 na 0:', error);
                }
            }

            momentaryButton3.addEventListener('mousedown', () => {
                momentaryButton3.classList.add('pressed');
            });

            momentaryButton3.addEventListener('mouseup', () => {
                momentaryButton3.classList.remove('pressed');
            });

            momentaryButton3.addEventListener('touchstart', () => {
                momentaryButton3.classList.add('pressed');
            });

            momentaryButton3.addEventListener('touchend', () => {
                momentaryButton3.classList.remove('pressed');
            });
    </script>
    }