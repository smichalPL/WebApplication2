@{
    ViewData["Title"] = "Home";
}

<h1>@ViewData["Title"]</h1>

<div class="card mt-5">
    @Html.TextBox("ScreanInput", null, new { @class = "calculator-screan", disabled = "disabled" })
    <div class="calculator-btns">
        <button type="button" class="btn-success">7</button>
        <button type="button" class="btn-success">8</button>
        <button type="button" class="btn-success end-button">9</button>
    </div>
</div>

<div id="zmienne">
</div>

<div id="error-message" style="display:none; color:red;"></div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.18/signalr.min.js"></script>

    <script>
        $(document).ready(function () {
            let connection = new signalR.HubConnectionBuilder()
                .withUrl("/plchub", { transport: signalR.HttpTransportType.WebSockets })
                .build();

            connection.start()
                .then(() => {
                    console.log("Połączono z Hubem.");
                    // Wywołujemy funkcję odczytu zmiennych po połączeniu
                    odczytajZmienne();
                })
                .catch(err => console.error("Błąd połączenia:", err));

            connection.on("ZmienneOdczytane", function (zmienne) {
                console.log("Odebrano zmienne:", zmienne);
                $("#zmienne").empty(); // Czyścimy poprzednie wartości

                for (const nazwa in zmienne) {
                    const wartosc = zmienne[nazwa];
                    let typ = typeof wartosc; // Określamy typ zmiennej

                    let element;
                    if (typ === "boolean") {
                        element = $(`<p>${nazwa}: <input type="checkbox" id="zmienna-${nazwa}" ${wartosc ? "checked" : ""} /></p>`);
                        element.find("input").change(function () {
                            zapiszZmienne({ [nazwa]: $(this).is(":checked") });
                        });
                    } else {
                        element = $(`<p>${nazwa}: <span id="wartosc-${nazwa}">${wartosc}</span></p>`);
                    }

                    $("#zmienne").append(element);
                }

                $("#error-message").hide();
            });

            connection.on("ZmiennaZapisana", function (nazwa, wartosc) {
                console.log("Zmienna zapisana:", nazwa, wartosc);
                $("#wartosc-" + nazwa).text(wartosc); // Aktualizujemy wartość w widoku
            });

            connection.on("BladOdczytu", function (nazwa, error) {
                console.error(`Błąd odczytu zmiennej ${nazwa} z PLC:`, error);
                $("#error-message").text(`Błąd odczytu zmiennej ${nazwa}: ${error}`);
                $("#error-message").show();
            });

            connection.on("BladZapisu", function (nazwa, error) {
                console.error(`Błąd zapisu zmiennej ${nazwa} do PLC:`, error);
                $("#error-message").text(`Błąd zapisu zmiennej ${nazwa}: ${error}`);
                $("#error-message").show();
            });

            function odczytajZmienne() {
                const nazwyZmiennych = ["MyGVL.MyBoolVariable", "MyGVL.iCounter"]; // Dodajemy nazwy zmiennych
                connection.invoke("OdczytajZmienne", "TwojaGrupa", nazwyZmiennych)
                    .catch(err => console.error("Błąd wywołania OdczytajZmienne:", err));
            }

            function zapiszZmienne(zmienneDoZapisu) {
                connection.invoke("ZapiszZmienne", "TwojaGrupa", zmienneDoZapisu)
                    .catch(err => console.error("Błąd wywołania ZapiszZmienne:", err));
            }

            // Aktualizacja co 5 sekund (możesz zmienić)
            setInterval(odczytajZmienne, 5000);

            window.addEventListener('beforeunload', function () {
                connection.stop()
                    .catch(err => console.error("Błąd zatrzymania połączenia:", err));
            });
        });
    </script>
}