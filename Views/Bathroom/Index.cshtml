@model WebApplication2.Models.BathroomViewModel

@{
    ViewData["Title"] = "Bathroom";
}
<h1>@ViewData["Title"]</h1>

<p>View room 1</p>
<head>
    <link rel="stylesheet" href="~/css/style.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<h2>Wartości z PLC</h2>

<p>lampSwitch: <span id="lamp-switch-display">@Model.lampSwitchHMI</span></p>
<p>wallSocket: <span id="wall-socket-display">@Model.wallSocketHMI</span></p>
<p>facadeBlindsUp: <span id="facade-blinds-up-display">@Model.facadeBlindsUpHMI</span></p>
<p>facadeBlindsDown: <span id="facade-blinds-down-display">@Model.facadeBlindsDownHMI</span></p>
<p>facadeBlindsStop: <span id="facade-blinds-stop-display">@Model.facadeBlindsStopHMI</span></p>
<p>lampRelayCeiling: <span id="lamp-relay-ceiling-display">@Model.lampRelayCeiling</span></p>
<p>windowOpenSensor: <span id="window-open-sensor-display">@Model.windowOpenSensor</span></p>

<h2>Zapis danych do PLC</h2>

<button id="toggle-bool-button" class="toggle-button-wall-socket-@Model.wallSocketHMI">
    <i class="fas fa-plug"></i> Wall Socket
</button>
<button id="toggle-blinds-up-button">
    <i id="blinds-up-icon" class="fas fa-angle-double-up"></i> Blinds Up
</button>
<button id="toggle-blinds-down-button">
    <i id="blinds-down-icon" class="fas fa-angle-double-down"></i> Blinds Down
</button>
<button id="toggle-blinds-stop-button">
    <i id="blinds-stop-icon" class="fas fa-stop-circle"></i> Blinds Stop
</button>
<button id="momentary-lamp-button">
    <i id="lamp-icon" class="fas fa-lightbulb"></i> Lamp Button
</button>

@section Scripts {
    <script>
        async function refresh() {
            const request = await fetch('/bathroom/json');
            const data = await request.json();

            console.log('Nasze dane', data);
            document.getElementById('lamp-switch-display').textContent = data.lampSwitchHMI;
            document.getElementById('wall-socket-display').textContent = data.wallSocketHMI;
            document.getElementById('facade-blinds-up-display').textContent = data.facadeBlindsUpHMI;
            document.getElementById('facade-blinds-down-display').textContent = data.facadeBlindsDownHMI;
            document.getElementById('facade-blinds-stop-display').textContent = data.facadeBlindsStopHMI;
            document.getElementById('lamp-relay-ceiling-display').textContent = data.lampRelayCeiling;
            document.getElementById('window-open-sensor-display').textContent = data.windowOpenSensor;


            // Aktualizacja koloru ikonki lampy
            updateLampIconColor(data.lampRelayCeiling);

            updateButtonColor(data.wallSocketHMI, 'toggle-bool-button');
            updateButtonColor(data.facadeBlindsUpHMI, 'toggle-blinds-up-button');
            updateButtonColor(data.facadeBlindsDownHMI, 'toggle-blinds-down-button');
            updateButtonColor(data.facadeBlindsStopHMI, 'toggle-blinds-stop-button');
        }


        function updateLampIconColor(lampState) {
            const lampIcon = document.getElementById('lamp-icon');

            if (lampState) {
                lampIcon.style.color = 'yellow'; // Lampa włączona - żółty kolor
            } else {
                lampIcon.style.color = 'gray'; // Lampa wyłączona - szary kolor
            }
        }

        setInterval(refresh, 2000);

        document.getElementById('toggle-bool-button').addEventListener('click', async () => {
            await toggleState('/bathroom/toggleBool', 'wallSocketHMI', 'toggle-bool-button');
        });

        document.getElementById('toggle-blinds-up-button').addEventListener('click', async () => {
            await toggleState('/bathroom/toggleBlindsUp', 'facadeBlindsUpHMI', 'toggle-blinds-up-button');
        });

        document.getElementById('toggle-blinds-down-button').addEventListener('click', async () => {
            await toggleState('/bathroom/toggleBlindsDown', 'facadeBlindsDownHMI', 'toggle-blinds-down-button');
        });

        document.getElementById('toggle-blinds-stop-button').addEventListener('click', async () => {
            await toggleState('/bathroom/toggleBlindsStop', 'facadeBlindsStopHMI', 'toggle-blinds-stop-button');
        });

        async function toggleState(url, modelPropertyName, buttonId) {
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({})
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                let displayId = modelPropertyName.replace('HMI', '');
                displayId = displayId.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase(); // Wstaw myślnik między małymi i wielkimi literami.
                displayId = displayId + '-display';

                console.log('Generowany identyfikator:', displayId);
                document.getElementById(displayId).textContent = data[modelPropertyName];

                // Aktualizacja koloru przycisku
                updateButtonColor(data[modelPropertyName], buttonId);

            } catch (error) {
                console.error(`Błąd podczas zmiany ${modelPropertyName}:`, error);
            }
        }

        function updateButtonColor(toggleButtonState, buttonId) {
            const button = document.getElementById(buttonId);
            button.className = toggleButtonState ? 'toggle-button-true' : 'toggle-button-false';
        }

        // Dodajemy obsługę zdarzeń dla nowego przycisku
        let momentaryButton = document.getElementById('momentary-lamp-button');
        let isMomentaryButtonPressed = false;
        let momentaryButtonInterval;

        momentaryButton.addEventListener('mousedown', () => {
            isMomentaryButtonPressed = true;
            setVariableTo1();

            momentaryButtonInterval = setInterval(() => {
                if (isMomentaryButtonPressed) {
                    setVariableTo1();
                }
            }, 100);
        });

        momentaryButton.addEventListener('mouseup', () => {
            isMomentaryButtonPressed = false;
            setVariableTo0();
            clearInterval(momentaryButtonInterval);
        });

        momentaryButton.addEventListener('touchstart', () => {
            isMomentaryButtonPressed = true;
            setVariableTo1();

            momentaryButtonInterval = setInterval(() => {
                if (isMomentaryButtonPressed) {
                    setVariableTo1();
                }
            }, 100);
        });

        momentaryButton.addEventListener('touchend', () => {
            isMomentaryButtonPressed = false;
            setVariableTo0();
            clearInterval(momentaryButtonInterval);
        });

        async function setVariableTo1() {
            try {
                await fetch('/bathroom/SetMomentarySwitchToTrue', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({})
                });
            } catch (error) {
                console.error('Błąd podczas ustawiania zmiennej na 1:', error);
            }
        }

        async function setVariableTo0() {
            try {
                await fetch('/bathroom/SetMomentarySwitchToFalse', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({})
                });
            } catch (error) {
                console.error('Błąd podczas ustawiania zmiennej na 0:', error);
            }
        }

        momentaryButton.addEventListener('mousedown', () => {
            momentaryButton.classList.add('pressed');
        });

        momentaryButton.addEventListener('mouseup', () => {
            momentaryButton.classList.remove('pressed');
        });

        momentaryButton.addEventListener('touchstart', () => {
            momentaryButton.classList.add('pressed');
        });

        momentaryButton.addEventListener('touchend', () => {
            momentaryButton.classList.remove('pressed');
        });
    </script>
}